---
import type { Platform, Framework, Tag, Category } from 'src/schemas/categorySchema';
import { cn } from '@lib/utils';

function isPlatform(category: Category): category is Platform {
  return typeof (category as Platform).abbreviation === 'string';
}

function isFramework(category: Category): category is Framework {
  return typeof (category as Framework).badge === 'object' && !isPlatform(category);
}

interface Props {
    category: Category | undefined | null;
    className?: string;
}

const { category, className } = Astro.props;

if (!category?.title) {
    return null;
}

const defaultBg = 'var(--color-surface-container)';
const defaultBorder = 'var(--color-outline)';
const defaultText = 'var(--color-on-surface-variant)';

let hoverBg = 'var(--color-surface-container-high)';
let hoverBorder = 'var(--color-outline-variant)';
let hoverText = 'var(--color-on-surface)';
let displayText = category.title;

if (isPlatform(category)) {
    displayText = category.abbreviation ?? category.title;
    if (category.badge?.background) {
        hoverBg = category.badge.background;
        hoverBorder = category.badge.border ?? hoverBg;
        hoverText = 'var(--color-on-primary)';
    }
} else if (isFramework(category)) {

    if (category.badge?.background) {
        hoverBg = category.badge.background;
        hoverBorder = category.badge.border ?? hoverBg;
        hoverText = 'var(--color-on-primary)';
    }
}

const styles = {
    '--default-bg': defaultBg,
    '--default-border': defaultBorder,
    '--default-text': defaultText,
    '--hover-bg': hoverBg,
    '--hover-border': hoverBorder,
    '--hover-text': hoverText,
};
---

<span
    style={styles}
    class={cn(
        'inline-block px-2 py-0.5 rounded-full border text-xs font-semibold leading-none transition-colors duration-200 ease-in-out',
        'bg-[var(--default-bg)] border-[var(--default-border)] text-[var(--default-text)]',
        'hover:bg-[var(--hover-bg)] hover:border-[var(--hover-border)] hover:text-[var(--hover-text)]',
        className
    )}
>
    {displayText}
</span>