---
// filepath: d:\projetos\sw\sw-site\apps\site\src\components\common\ProjectCard\ProjectCard.astro
import Badge from 'src/components/common/Badges/Badge.astro';
import { getImageByPath } from 'src/helpers/getImageByPath';
import type { ProcessedProject } from 'src/helpers/collections/projectHelpers';
import { cn } from '@helpers/cn';
import { getEntry, type CollectionEntry } from 'astro:content'; // Import getEntry

interface Props {
    project: ProcessedProject;
}

const { project }: Props = Astro.props;

const image = project.data.hero?.src
    ? await getImageByPath(project.data.hero.src, { width: 800, height: 600 })
    : null;

// Fetch the actual data for each category reference
const platformRefs = project.data.category?.platforms ?? [];
const frameworkRefs = project.data.category?.frameworks ?? [];
const tagRefs = project.data.category?.tags ?? [];

// Use Promise.all to fetch entries concurrently
const platforms = await Promise.all(
    platformRefs.map(ref => getEntry(ref.collection, ref.id))
);
const frameworks = await Promise.all(
    frameworkRefs.map(ref => getEntry(ref.collection, ref.id))
);
const tags = await Promise.all(
    tagRefs.map(ref => getEntry(ref.collection, ref.id))
);

// Filter out any null results (if an entry wasn't found)
const validPlatforms = platforms.filter(p => p !== null) as CollectionEntry<'platforms'>[];
const validFrameworks = frameworks.filter(f => f !== null) as CollectionEntry<'frameworks'>[];
const validTags = tags.filter(t => t !== null) as CollectionEntry<'tags'>[];

---

<article
    class={cn(
        'relative flex h-full w-full flex-col overflow-hidden rounded-2xl',
        'bg-radial-[at_15%_15%]',
        'text-on-surface from-surface-container-low/60 to-surface-container/60 backdrop-blur-md',
        'shadow-xl transition-shadow duration-300 hover:shadow-primary/10',
    )}
>
    {
        image?.src && (
            <a href={'/projects/' + project.slug} class='block'>
                <img
                    src={image.src}
                    width={image.attributes.width}
                    height={image.attributes.height}
                    alt={project.data.hero?.altText ?? `Hero image for ${project.data.title}`}
                    class='aspect-[3/2] h-auto max-h-60 w-full object-cover object-top'
                />
            </a>
        )
    }
    <div class="flex flex-col flex-grow p-4">
        <header class='mb-2'>
            <h4 class=''>
                <a href={'/projects/' + project.slug} class="hover:underline">{project.data.title}</a>
            </h4>
            {project.data.subtitle && <p class="text-sm text-on-surface-variant">{project.data.subtitle}</p>}
        </header>

        {(validPlatforms.length > 0 || validFrameworks.length > 0 || validTags.length > 0) && (
            <div class='mt-auto flex flex-col gap-1 pt-2'>
                <ul class='list-none'>
                    { validPlatforms.length > 0 && 
                    <li>
                        Plataformas:
                        <ul class='flex flex-wrap list-none'>
                            {validPlatforms.map((platformEntry) => (
                                <li>
                                    <Badge category={platformEntry.data} />
                                </li>
                            ))}
                        </ul>
                    </li>
                    }
                    { validFrameworks.length > 0 &&
                    <li>
                        Frameworks:
                        <ul class='flex flex-wrap list-none'>
                            {validFrameworks.map((frameworkEntry) => (
                                <li>
                                    <Badge category={frameworkEntry.data} />
                                </li>
                            ))}
                        </ul>
                    </li>
                    }
                    { validTags.length > 0 &&
                    <li>
                        Tags:
                        <ul class='flex flex-wrap list-none'>
                            {validTags.map((tagEntry) => (
                                <li>
                                    <Badge category={tagEntry.data} />
                                </li>
                            ))}
                        </ul>
                    </li>
                    }
                </ul>
            </div>
        )}
    </div>
</article>