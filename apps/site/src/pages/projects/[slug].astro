---
import { marked } from 'marked';

import Layout from '@layouts/PageLayout.astro';
import { Hero } from '@widgets/Project/Project.astro';

import { getAllProjects, type ProcessedProject } from '@lib/collections/projectHelpers';
import { getIconComponent } from '@lib/getIconComponent';
import { IconBadge } from '@common/ProjectsGallery/ProjectCard/IconBadge';
import { cn, darkenColor, getContrastColor } from '@lib/utils';

import type { metaSEO } from '@schemas/common/seoSchema';

export async function getStaticPaths() {
    const processedProjects = await getAllProjects();

    return processedProjects.map((project) => ({
        params: { slug: project.data.slug },
        props: { project },
    }));
}

const { project } = Astro.props as { project: ProcessedProject };

const date = project.data.date || null;

const products = project.data.category.products || [];
const platforms = project.data.category.platforms || [];
const frameworks = project.data.category.frameworks || [];
const tags = project.data.category.tags || [];

const content = project.data.content;
const html = marked.parse(content);

const hero = project.data.hero || null;
const heroImageSrc = hero.src;

const constructedSeo: metaSEO = {
    title: project.data.title || null,
    description: project.data.summary || null,
    canonical: project.data.seo?.canonical || Astro.url.toString(),
    robots: {
        noindex: project.data.seo?.robots?.noindex || null,
        nofollow: project.data.seo?.robots?.nofollow || null,
    },
    og: {
        title: project.data.seo?.og?.title || project.data.title || null,
        description: project.data.seo?.og?.description || project.data.summary || null,
        type: project.data.seo?.og?.type || 'article',
        image: project.data.seo?.og?.image || heroImageSrc || null,
    },
};

const seo = project.data.seo || null;

---

<Layout seo={{ ...constructedSeo, ...seo }}>

    <section class='relative flex flex-col h-full w-full items-center'>
        <div class="">
            {
                heroImageSrc && (
                    <Hero
                        mobileImagePath={heroImageSrc}
                        desktopImagePath={heroImageSrc}
                    />
                )
            }
            <div class="absolute top-0 w-full h-full bg-surface/80 backdrop-blur-lg"></div>
        </div>
        <header class="w-full h-full absolute top-0 z-10 space-y-4 flex flex-col items-center justify-center">
            <div class="sw-container gap-4 flex flex-col text-on-surface justify-center">
                {
                    project.data.title && (
                        <h2 class='sw-display text-on-surface'>
                            {project.data.title}
                        </h2>
                    )
                }
                {
                    project.data.subtitle && (
                        <h3 class='text-on-surface'>
                            {project.data.subtitle}
                        </h3>
                    )
                }
            </div>

            <div class='sw-container flex flex-col space-y-4 z-20'>
                <div class='flex flex-wrap gap-2'>
                    {products.map((product) => {
                        const Icon = getIconComponent('product', product.id);
                        return (
                        <IconBadge
                                label={product.title || product.id}
                                showLabel={true}
                                variant='default'
                                client:idle
                            >
                                <Fragment slot="icon">
                                    {Icon ? <Icon class="w-4 h-4" /> : null}
                                </Fragment>
                            </IconBadge>
                        );
                    })}
                </div>

                <div class='flex flex-wrap gap-2'>
                    {platforms.map((platform) => {
                        const Icon = getIconComponent('platform', platform.id);
                        return (
                        <IconBadge
                                label={platform.title || platform.id}
                                showLabel={true}
                                variant='default'
                                client:idle
                            >
                                <Fragment slot="icon">
                                    {Icon ? <Icon class="w-4 h-4" /> : null}
                                </Fragment>
                            </IconBadge>
                        );
                    })}
                </div>

                <div class='flex flex-wrap gap-2'>
                    {frameworks.map((framework) => {
                        const Icon = getIconComponent('framework', framework.id);
                        const badgeBgColor = framework.badge?.background;
                        const badgeHoverBorderColor = badgeBgColor
                            ? darkenColor(badgeBgColor, 80)
                            : undefined;

                        const badgeStyle = badgeBgColor
                            ? ({
                                    '--badge-hover-bg': badgeBgColor,
                                    '--badge-hover-border': badgeHoverBorderColor ?? badgeBgColor,
                                } as React.CSSProperties)
                            : undefined;

                        const hoverTextColorClass = badgeBgColor
                            ? getContrastColor(badgeBgColor) === 'black'
                                ? 'hover:text-black'
                                : 'hover:text-white'
                            : 'hover:text-black';

                        return (
                            <a
                                href={framework.link}
                                class='no-underline'
                                target='_blank'
                                rel='noopener noreferrer'
                            >
                                <IconBadge
                                    label={framework.title || framework.id}
                                    showLabel={true}
                                    variant='default'
                                    style={badgeStyle}
                                    className={cn(
                                        'transition-colors duration-200',
                                        badgeBgColor &&
                                            `hover:border-[var(--badge-hover-border)]/40 hover:bg-[var(--badge-hover-bg)] ${hoverTextColorClass}`,
                                    )}
                                >
                                    <Fragment slot="icon">
                                        {Icon ? <Icon class="w-4 h-4" /> : null}
                                    </Fragment>
                                </IconBadge>
                            </a>
                        );
                    })}
                </div>

                <div class='flex flex-wrap gap-2'>
                    {tags.map((tag) => {
                        return (
                        <IconBadge
                                label={tag.title || tag.id}
                                showLabel={true}
                                variant='default'
                                client:idle
                        />
                        );
                    })}
                </div>
            </div>
        </header>
    </section>

    <div class="sw-halftone relative w-full bg-surface-dim pb-12 text-primary">
        <div class='sw-halftone absolute -top-56 w-full h-24 md:h-56 bg-surface-dim text-primary z-20' 
        style="clip-path: polygon(100% 100%, 0 100% , 0 0);"></div>
        <section>
            <div class="sw-container py-12 md:py-16">
                <article class="text-on-surface space-y-4">
                    <Fragment set:html={html} />
                </article>
            </div>
        </section>
    </div>
</Layout>
